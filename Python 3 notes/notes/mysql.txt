MySQL рж╣рж▓рзЛ ржПржХржЯрж╛ ржбрж╛ржЯрж╛ржмрзЗрж╕ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ рж╕рж┐рж╕рзНржЯрзЗржоред ржПрж░ ржЖрж░рзНржХрж┐ржЯрзЗржХржЪрж╛рж░ ржЕрж░рзНржерж╛рзО ржЧржаржи ржПржоржиржнрж╛ржмрзЗ ржбрж┐ржЬрж╛ржЗржи ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ ржпрж╛рждрзЗ ржбрж╛ржЯрж╛ржмрзЗрж╕ ржжрзНрж░рзБржд, ржжржХрзНрж╖ ржУ рж╕рзБрж╖рзНржарзБржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рждрзЗ ржкрж╛рж░рзЗред

MySQL ржЖрж░рзНржХрж┐ржЯрзЗржХржЪрж╛рж░ржЯрж┐ ржЕржирзЗржХржЧрзБрж▓рзЛ рж▓рзЗрзЯрж╛рж░ ржмрж╛ рж╕рзНрждрж░рзЗ ржмрж┐ржнржХрзНржд, ржпрзЗржЦрж╛ржирзЗ ржкрзНрж░рждрж┐ржЯрж┐ рж╕рзНрждрж░рзЗрж░ ржЖрж▓рж╛ржжрж╛ ржЖрж▓рж╛ржжрж╛ ржХрж╛ржЬ ржерж╛ржХрзЗред

MySQL ржЖрж░рзНржХрж┐ржЯрзЗржХржЪрж╛рж░рзЗрж░ ржкрзНрж░ржзрж╛ржи ржЕржВрж╢рж╕ржорзВрж╣
рзз. ржХрзНрж▓рж╛рзЯрзЗржирзНржЯ рж▓рзЗрзЯрж╛рж░ (Client Layer)
ржПржЦрж╛ржирзЗ ржерж╛ржХрзЗ ржХрзНрж▓рж╛рзЯрзЗржирзНржЯ ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи ржмрж╛ ржЗржЙржЬрж╛рж░ ржпрзЗржЧрзБрж▓рзЛ MySQL рж╕рж╛рж░рзНржнрж╛рж░рзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзЗред

ржпрзЗржоржи: MySQL Command Line, ржУрзЯрзЗржм ржЕрзНржпрж╛ржк, ржЬрж╛ржнрж╛ ржмрж╛ ржкрж┐ржПржЗржЪржкрж┐ ржкрзНрж░рзЛржЧрзНрж░рж╛ржоред

ржХрзНрж▓рж╛рзЯрзЗржирзНржЯ SQL ржХрзЛрзЯрзЗрж░рж┐ ржкрж╛ржарж╛рзЯ ржПржмржВ ржлрж▓рж╛ржлрж▓ ржкрж╛рзЯред

рзи. ржХрж╛ржирзЗржХрж╢ржи ржорзНржпрж╛ржирзЗржЬрж╛рж░ (Connection Manager)
ржХрзНрж▓рж╛рзЯрзЗржирзНржЯржжрзЗрж░ ржХрж╛ржирзЗржХрж╢ржи ржЧрзНрж░рж╣ржг ржХрж░рзЗред

ржЗржЙржЬрж╛рж░ржХрзЗ ржнрзЗрж░рж┐ржлрж╛ржЗ ржХрж░рзЗ (Authentication)ред

ржкрзНрж░рждрж┐ржЯрж┐ ржХрзНрж▓рж╛рзЯрзЗржирзНржЯрзЗрж░ ржЬржирзНржп ржЖрж▓рж╛ржжрж╛ ржерзНрж░рзЗржб рждрзИрж░рж┐ ржХрж░рзЗред

рзй. SQL ржЗржирзНржЯрж╛рж░ржлрзЗрж╕ ржУ ржкрж╛рж░рзНрж╕рж╛рж░ (SQL Interface / Parser)
ржХрзНрж▓рж╛рзЯрзЗржирзНржЯ ржерзЗржХрзЗ ржЖрж╕рж╛ SQL ржХрзЛрзЯрзЗрж░рж┐ ржЧрзНрж░рж╣ржг ржХрж░рзЗред

ржХрзЛрзЯрзЗрж░рж┐рж░ рж╕рж┐ржиржЯрзНржпрж╛ржХрзНрж╕ ржЪрзЗржХ ржХрж░рзЗ (рж╕ржарж┐ржХ рж▓рзЗржЦрж╛ рж╣рзЯрзЗржЫрзЗ ржХрж┐ржирж╛)ред

ржХрзЛрзЯрзЗрж░рж┐ржХрзЗ ржПржХржЯрж┐ ржЯрзНрж░рзА рж╕рзНржЯрзНрж░рж╛ржХржЪрж╛рж░рзЗ (Parse Tree) рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рзЗред

рзк. ржЕржкржЯрж┐ржорж╛ржЗржЬрж╛рж░ (Optimizer)
ржХрзЛрзЯрзЗрж░рж┐рж░ ржХрж╛рж░рзНржпржХрж░рзА ржкрж░рж┐ржХрж▓рзНржкржирж╛ рждрзИрж░рж┐ ржХрж░рзЗред

рж╕ржмржЪрзЗрзЯрзЗ ржжрзНрж░рзБржд ржПржмржВ ржХржо рж░рж┐рж╕рзЛрж░рзНрж╕рзЗ ржХрж╛ржЬ ржХрж░рж╛рж░ ржЙржкрж╛рзЯ ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рзЗред

ржарж┐ржХ ржХрж░рзЗ ржХрзЛржи ржЗржирзНржбрзЗржХрзНрж╕ ржмрж╛ ржЯрзЗржмрж┐рж▓ ржЬрзЯрзЗржи ржЖржЧрзЗ рж╣ржмрзЗ ржЗрждрзНржпрж╛ржжрж┐ред

рзл. ржХрзЛрзЯрзЗрж░рж┐ ржХрзНржпрж╛рж╢ (Query Cache) [ржРржЪрзНржЫрж┐ржХ]
ржПржХржЗ SELECT ржХрзЛрзЯрзЗрж░рж┐рж░ ржлрж▓рж╛ржлрж▓ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзЗ рж░рж╛ржЦрзЗред

ржкрж░ржмрж░рзНрждрзАрждрзЗ ржпржжрж┐ ржПржХржЗ ржХрзЛрзЯрзЗрж░рж┐ ржЖрж╕рзЗ, ржжрзНрж░рзБржд рж░рзЗржЬрж╛рж▓рзНржЯ ржжрзЗрзЯ ржХрзНржпрж╛рж╢ ржерзЗржХрзЗред

ржирждрзБржи MySQL ржнрж╛рж░рзНрж╕ржирзЗ ржбрж┐ржлрж▓рзНржЯ ржмржирзНржз ржерж╛ржХрзЗред

рзм. рж╕рзНржЯрзЛрж░рзЗржЬ ржЗржЮрзНржЬрж┐ржи рж▓рзЗрзЯрж╛рж░ (Storage Engine Layer)
MySQL ржПрж░ рж╕ржмржЪрзЗрзЯрзЗ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржЕржВрж╢ред

ржбрж╛ржЯрж╛ рж╕ржВрж░ржХрзНрж╖ржг, ржЖржкржбрзЗржЯ, ржбрж┐рж▓рж┐ржЯ ржЗрждрзНржпрж╛ржжрж┐ ржХрж╛ржЬ ржХрж░рзЗред

ржмрж┐ржнрж┐ржирзНржи ржзрж░ржирзЗрж░ рж╕рзНржЯрзЛрж░рзЗржЬ ржЗржЮрзНржЬрж┐ржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛рзЯ, ржпрзЗржоржи:

InnoDB (ржбрж┐ржлрж▓рзНржЯ, ржЯрзНрж░рж╛ржиржЬрзЗржХрж╢ржи рж╕рж╛ржкрзЛрж░рзНржЯ ржХрж░рзЗ, рж░рзЛ-рж▓рзЗржнрзЗрж▓ рж▓ржХрж┐ржВ)

MyISAM (ржЯрзНрж░рж╛ржиржЬрзЗржХрж╢ржи рж╕рж╛ржкрзЛрж░рзНржЯ ржХрж░рзЗ ржирж╛, ржЯрзЗржмрж┐рж▓ рж▓рзЗржнрзЗрж▓ рж▓ржХрж┐ржВ)

Memory (ржбрж╛ржЯрж╛ржХрзЗ ржорзЗржорзЛрж░рж┐рждрзЗ рж░рж╛ржЦрзЗ, ржжрзНрж░рзБржд ржПржХрзНрж╕рзЗрж╕рзЗрж░ ржЬржирзНржп)

рзн. ржлрж╛ржЗрж▓ рж╕рж┐рж╕рзНржЯрзЗржо / ржЕржкрж╛рж░рзЗржЯрж┐ржВ рж╕рж┐рж╕рзНржЯрзЗржо (File System / OS)
MySQL ржбрж╛ржЯрж╛ржмрзЗржЬрзЗрж░ ржбрж╛ржЯрж╛ ржлрж╛ржЗрж▓, рж▓ржЧ ржлрж╛ржЗрж▓ ржЗрждрзНржпрж╛ржжрж┐ ржбрж┐рж╕рзНржХрзЗ рж░рж╛ржЦрзЗред

ржЕржкрж╛рж░рзЗржЯрж┐ржВ рж╕рж┐рж╕рзНржЯрзЗржорзЗрж░ ржорж╛ржзрзНржпржорзЗ ржлрж╛ржЗрж▓ рж░рж┐ржб/рж░рж╛ржЗржЯ ржХрж░рзЗред

рж╕рж░рж▓ ржПржХржЯрж╛ ржбрж╛рзЯрж╛ржЧрзНрж░рж╛ржо
markdown

ржХрзНрж▓рж╛рзЯрзЗржирзНржЯ (CLI, ржУрзЯрзЗржм ржЕрзНржпрж╛ржк)
       тЖУ
ржХрж╛ржирзЗржХрж╢ржи ржорзНржпрж╛ржирзЗржЬрж╛рж░ (Authentication, ржерзНрж░рзЗржб)
       тЖУ
SQL ржЗржирзНржЯрж╛рж░ржлрзЗрж╕ ржУ ржкрж╛рж░рзНрж╕рж╛рж░
       тЖУ
ржЕржкржЯрж┐ржорж╛ржЗржЬрж╛рж░
       тЖУ
ржХрзЛрзЯрзЗрж░рж┐ ржХрзНржпрж╛рж╢ (ржРржЪрзНржЫрж┐ржХ)
       тЖУ
рж╕рзНржЯрзЛрж░рзЗржЬ ржЗржЮрзНржЬрж┐ржи (InnoDB, MyISAM, ржЗрждрзНржпрж╛ржжрж┐)
       тЖУ
ржлрж╛ржЗрж▓ рж╕рж┐рж╕рзНржЯрзЗржо / OS
// ===================== DATABASE=====================
-- COLLAGE ржбрж╛ржЯрж╛ржмрзЗржЬ рждрзИрж░рж┐ ржХрж░рзЛ
CREATE DATABASE COLLAGE;
-- COLLAGE ржбрж╛ржЯрж╛ржмрзЗржЬ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЛ
USE COLLAGE;

-- ржПржХржЯрж┐ students ржЯрзЗржмрж┐рж▓ рждрзИрж░рж┐ ржХрж░рзЛ
CREATE TABLE students (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    age INT
);

-- students ржЯрзЗржмрж┐рж▓рзЗ ржирждрзБржи рж░рзЗржХрж░рзНржб ржпрзЛржЧ ржХрж░рзЛ
INSERT INTO students (id, name, age) VALUES (1, 'John Doe', 20);

-- students ржЯрзЗржмрж┐рж▓рзЗрж░ рж╕ржм рж░рзЗржХрж░рзНржб ржжрзЗржЦрзЛ
SELECT * FROM students;

-- students ржЯрзЗржмрж┐рж▓рзЗрж░ рж╕ржм рж░рзЗржХрж░рзНржб ржорзБржЫрзЗ ржлрзЗрж▓рзЛ
DELETE FROM students;

-- students ржЯрзЗржмрж┐рж▓ ржорзБржЫрзЗ ржлрзЗрж▓рзЛ
DROP TABLE students;

-- COLLAGE ржбрж╛ржЯрж╛ржмрзЗржЬ ржорзБржЫрзЗ ржлрзЗрж▓рзЛ
DROP DATABASE COLLAGE;

-- ржПржХржЯрж┐ students ржЯрзЗржмрж┐рж▓ рждрзИрж░рж┐ ржХрж░рзЛ

CREATE TABLE students (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    age INT
);
рзи. DROP
ржХрж╛ржЬ: ржбрж╛ржЯрж╛ржмрзЗржЬ ржмрж╛ ржЯрзЗржмрж┐рж▓ рж╕ржорзНржкрзВрж░рзНржг ржорзБржЫрзЗ ржлрзЗрж▓рж╛рж░ ржЬржирзНржп ржмрзНржпржмрж╣рзГржд рж╣рзЯред

ржЙржжрж╛рж╣рж░ржг: ржПржХржЯрж┐ ржЯрзЗржмрж┐рж▓ ржорзБржЫрзЗ ржлрзЗрж▓рж╛

DROP TABLE students;
рж╕рж╛ржмржзрж╛ржи: DROP ржХрж░рж▓рзЗ ржкрзБрж░рзЛ ржЯрзЗржмрж┐рж▓ ржУ рждрж╛рж░ ржбрж╛ржЯрж╛ ржорзБржЫрзЗ ржпрж╛рзЯ, ржЖрж░ рждрж╛ ржлрзЗрж░ржд ржЖржирж╛ ржпрж╛рзЯ ржирж╛ред

рзй. ALTER
ржХрж╛ржЬ: ржмрж┐ржжрзНржпржорж╛ржи ржбрж╛ржЯрж╛ржмрзЗржЬ ржмрж╛ ржЯрзЗржмрж┐рж▓рзЗрж░ ржХрж╛ржарж╛ржорзЛ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛рж░ ржЬржирзНржп ржмрзНржпржмрж╣рзГржд рж╣рзЯ (ржпрзЗржоржи, ржХрж▓рж╛ржо ржпрзЛржЧ, ржХрж▓рж╛ржо ржорзБржЫрзЗ ржлрзЗрж▓рж╛, ржХрж▓рж╛ржорзЗрж░ ржбрзЗржЯрж╛ржЯрж╛ржЗржк ржкрж░рж┐ржмрж░рзНрждржи ржЗрждрзНржпрж╛ржжрж┐)ред

ржЙржжрж╛рж╣рж░ржг: ржЯрзЗржмрж┐рж▓рзЗ ржирждрзБржи ржХрж▓рж╛ржо ржпрзЛржЧ ржХрж░рж╛

ALTER TABLE students ADD COLUMN email VARCHAR(100);

рж╕рж╛ржзрж╛рж░ржг ржмрзНржпржмрж╣рж╛рж░ ржУ ржЙржжрж╛рж╣рж░ржг (MySQL):
1. ржбрж╛ржЯрж╛ржмрзЗржЬрзЗрж░ ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ рж╕рзЗржЯ (Character Set) ржУ ржХрж▓рзНрж▓рзЗрж╢ржи (Collation) ржкрж░рж┐ржмрж░рзНрждржи

ALTER DATABASE database_name
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;
ржмрзНржпрж╛ржЦрзНржпрж╛:

database_name тАФ ржЖржкржирж╛рж░ ржбрж╛ржЯрж╛ржмрзЗржЬрзЗрж░ ржирж╛ржоред

CHARACTER SET тАФ ржбрж╛ржЯрж╛ржмрзЗржЬрзЗ ржмрзНржпржмрж╣рзГржд ржбрж┐ржлрж▓рзНржЯ ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ рж╕рзЗржЯред

COLLATE тАФ ржбрж╛ржЯрж╛ржмрзЗржЬрзЗ ржмрзНржпржмрж╣рзГржд ржбрж┐ржлрж▓рзНржЯ ржХрж▓рзНрж▓рзЗрж╢ржи (ржпрж╛ ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ рждрзБрж▓ржирж╛ ржирж┐рж░рзНржзрж╛рж░ржг ржХрж░рзЗ)ред

PostgreSQL-ржП ржбрж╛ржЯрж╛ржмрзЗржЬрзЗрж░ ржирж╛ржо ржкрж░рж┐ржмрж░рзНрждржирзЗрж░ ржЬржирзНржп:
ALTER DATABASE old_database_name RENAME TO new_database_name;
SQL Server-ржП ржбрж╛ржЯрж╛ржмрзЗржЬрзЗрж░ ржХрж┐ржЫрзБ рж╕рзЗржЯрж┐ржВрж╕ ржкрж░рж┐ржмрж░рзНрждржи:
ALTER DATABASE database_name SET RECOVERY FULL;


рзк. RENAME
ржХрж╛ржЬ: ржбрж╛ржЯрж╛ржмрзЗржЬ ржмрж╛ ржЯрзЗржмрж┐рж▓рзЗрж░ ржирж╛ржо ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛рж░ ржЬржирзНржп ржмрзНржпржмрж╣рзГржд рж╣рзЯред

ржЙржжрж╛рж╣рж░ржг: ржЯрзЗржмрж┐рж▓рзЗрж░ ржирж╛ржо ржкрж░рж┐ржмрж░рзНрждржи

ALTER TABLE students RENAME TO learners;
(PostgreSQL ржмрж╛ MySQL ржПрж░ рж╕ржВрж╕рзНржХрж░ржг ржЕржирзБрж╕рж╛рж░рзЗ syntax ржХрж┐ржЫрзБржЯрж╛ ржнрж┐ржирзНржи рж╣рждрзЗ ржкрж╛рж░рзЗред)

рзл. TRUNCATE
ржХрж╛ржЬ: ржЯрзЗржмрж┐рж▓рзЗрж░ рж╕ржм рж░рзЗржХрж░рзНржб ржжрзНрж░рзБржд ржорзБржЫрзЗ ржлрзЗрж▓рж╛рж░ ржЬржирзНржп ржмрзНржпржмрж╣рзГржд рж╣рзЯ, ржХрж┐ржирзНрждрзБ ржЯрзЗржмрж┐рж▓рзЗрж░ ржХрж╛ржарж╛ржорзЛ ржЕржХрзНрж╖рзБржгрзНржг ржерж╛ржХрзЗред

ржЙржжрж╛рж╣рж░ржг:

TRUNCATE TABLE students;
рж╕ржВржХрзНрж╖рж┐ржкрзНржд рждрзБрж▓ржирж╛:
ржХржорж╛ржирзНржб	ржХрж╛ржЬ	ржбрж╛ржЯрж╛ ржлрзЗрж░ржд ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ?	ржЯрзЗржмрж┐рж▓ ржХрж╛ржарж╛ржорзЛ рж░рзЯрзЗ ржпрж╛рзЯ?
CREATE	ржирждрзБржи ржбрж╛ржЯрж╛ржмрзЗржЬ ржмрж╛ ржЯрзЗржмрж┐рж▓ рждрзИрж░рж┐ ржХрж░рж╛	N/A	N/A
DROP	ржбрж╛ржЯрж╛ржмрзЗржЬ ржмрж╛ ржЯрзЗржмрж┐рж▓ рж╕ржорзНржкрзВрж░рзНржг ржорзБржЫрзЗ ржлрзЗрж▓рж╛	ржирж╛	ржирж╛
ALTER	ржЯрзЗржмрж┐рж▓рзЗрж░ ржХрж╛ржарж╛ржорзЛ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛	рж╣рзНржпрж╛ржБ	рж╣рзНржпрж╛ржБ
RENAME	ржбрж╛ржЯрж╛ржмрзЗржЬ ржмрж╛ ржЯрзЗржмрж┐рж▓рзЗрж░ ржирж╛ржо ржкрж░рж┐ржмрж░рзНрждржи	N/A	рж╣рзНржпрж╛ржБ
TRUNCATE	ржЯрзЗржмрж┐рж▓рзЗрж░ рж╕ржм рж░рзЗржХрж░рзНржб ржжрзНрж░рзБржд ржорзБржЫрзЗ ржлрзЗрж▓рж╛	ржирж╛	рж╣рзНржпрж╛ржБ

============ Constraints============

ржбрж╛ржЯрж╛ржмрзЗрж╕рзЗ Constraints ржорж╛ржирзЗ рж╣ржЪрзНржЫрзЗ ржПржоржи ржирж┐рзЯржо/рж╢рж░рзНржд ржпрж╛ ржЯрзЗржмрж┐рж▓рзЗрж░ ржбрж╛ржЯрж╛ржХрзЗ рж╕ржарж┐ржХ ржУ ржирж┐рж░рзНржнрзБрж▓ рж░рж╛ржЦрждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рзЗред
ржПржЧрзБрж▓рзЛ рж╕рж╛ржзрж╛рж░ржгржд ржбрж╛ржЯрж╛ ржЗржирж╕рж╛рж░рзНржЯ ржмрж╛ ржЖржкржбрзЗржЯ ржХрж░рж╛рж░ рж╕ржорзЯ ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржи рж╣рж┐рж╕рзЗржмрзЗ ржХрж╛ржЬ ржХрж░рзЗред

ЁЯУМ ржбрж╛ржЯрж╛ржмрзЗрж╕рзЗрж░ рж╕рж╛ржзрж╛рж░ржг Constraints
Constraint	ржХрж╛ржЬ
NOT NULL	ржХрзЛржирзЛ ржХрж▓рж╛ржорзЗ NULL ржнрзНржпрж╛рж▓рзБ ржврзБржХрждрзЗ ржжрзЗржмрзЗ ржирж╛ред
UNIQUE	ржХрж▓рж╛ржорзЗрж░ ржнрзНржпрж╛рж▓рзБ ржЯрзЗржмрж┐рж▓рзЗ ржЗржЙржирж┐ржХ ржерж╛ржХрждрзЗ рж╣ржмрзЗред ржбрзБржкрзНрж▓рж┐ржХрзЗржЯ рж╣ржмрзЗ ржирж╛ред
PRIMARY KEY	ржкрзНрж░рждрж┐ржЯрж┐ рж░рзЛ-ржХрзЗ ржЗржЙржирж┐ржХржнрж╛ржмрзЗ ржЪрж┐рж╣рзНржирж┐ржд ржХрж░рзЗ (ржЕржЯрзЛржорзЗржЯрж┐ржХ NOT NULL + UNIQUE)ред
FOREIGN KEY	ржЕржирзНржп ржЯрзЗржмрж┐рж▓рзЗрж░ ржХрж▓рж╛ржорзЗрж░ рж╕рж╛ржерзЗ рж░рж┐рж▓рзЗрж╢ржи рждрзИрж░рж┐ ржХрж░рзЗ (Referential Integrity ржмржЬрж╛рзЯ рж░рж╛ржЦрзЗ)ред
CHECK	ржнрзНржпрж╛рж▓рзБ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╢рж░рзНржд ржкрзВрж░ржг ржХрж░ржЫрзЗ ржХрж┐ржирж╛ ржЪрзЗржХ ржХрж░рзЗред
DEFAULT	ржХрзЛржирзЛ ржнрзНржпрж╛рж▓рзБ ржирж╛ ржжрж┐рж▓рзЗ ржбрж┐ржлрж▓рзНржЯ ржнрзНржпрж╛рж▓рзБ рж╕рзЗржЯ ржХрж░рзЗред

ЁЯФ╣ 1. NOT NULL
ржХрж╛ржЬ: ржХрж▓рж╛ржо ржлрж╛ржБржХрж╛ (NULL) ржерж╛ржХрждрзЗ ржкрж╛рж░ржмрзЗ ржирж╛ред

SQL

sql
Copy
Edit
CREATE TABLE users (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL
);
Django

python
Copy
Edit
class User(models.Model):
    name = models.CharField(max_length=100, null=False)
ЁЯФ╣ 2. UNIQUE
ржХрж╛ржЬ: ржХрж▓рж╛ржорзЗрж░ ржнрзНржпрж╛рж▓рзБ ржЕржмрж╢рзНржпржЗ ржЗржЙржирж┐ржХ рж╣рждрзЗ рж╣ржмрзЗред

SQL

sql
Copy
Edit
CREATE TABLE users (
    email VARCHAR(100) UNIQUE
);
Django

python
Copy
Edit
class User(models.Model):
    email = models.EmailField(unique=True)
ЁЯФ╣ 3. PRIMARY KEY
ржХрж╛ржЬ: ржкрзНрж░рждрж┐ржЯрж┐ рж░рзЛ ржЗржЙржирж┐ржХржнрж╛ржмрзЗ ржЪрж┐рж╣рзНржирж┐ржд ржХрж░рзЗ (NOT NULL + UNIQUE ржПржХрж╕рж╛ржерзЗ)ред

SQL

sql
Copy
Edit
CREATE TABLE users (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100)
);
Django

python
Copy
Edit
class User(models.Model):
    id = models.AutoField(primary_key=True)
ЁЯФ╣ 4. FOREIGN KEY
ржХрж╛ржЬ: ржПржХ ржЯрзЗржмрж┐рж▓рзЗрж░ ржХрж▓рж╛ржоржХрзЗ ржЕржирзНржп ржЯрзЗржмрж┐рж▓рзЗрж░ рж╕рж╛ржерзЗ рж░рж┐рж▓рзЗржЯ ржХрж░рзЗ (Referential Integrity)ред

SQL

sql
Copy
Edit
CREATE TABLE orders (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT,
    FOREIGN KEY (user_id) REFERENCES users(id)
);
Django

python
Copy
Edit
class Order(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
ЁЯФ╣ 5. CHECK
ржХрж╛ржЬ: рж╢рж░рзНржд ржкрзВрж░ржг ржирж╛ рж╣рж▓рзЗ ржЗржирж╕рж╛рж░рзНржЯ/ржЖржкржбрзЗржЯ рж╣ржмрзЗ ржирж╛ред

SQL

sql
Copy
Edit
CREATE TABLE products (
    id INT PRIMARY KEY AUTO_INCREMENT,
    price DECIMAL(10, 2) CHECK (price > 0)
);
Django

python
Copy
Edit
from django.core.validators import MinValueValidator

class Product(models.Model):
    price = models.DecimalField(max_digits=10, decimal_places=2, validators=[MinValueValidator(1)])
ЁЯФ╣ 6. DEFAULT
ржХрж╛ржЬ: ржнрзНржпрж╛рж▓рзБ ржирж╛ ржжрж┐рж▓рзЗ ржбрж┐ржлрж▓рзНржЯ ржнрзНржпрж╛рж▓рзБ рж╕рзЗржЯ рж╣ржмрзЗред

SQL

sql
Copy
Edit
CREATE TABLE users (
    status VARCHAR(20) DEFAULT 'active'
);
Django

python
Copy
Edit
class User(models.Model):
    status = models.CharField(max_length=20, default='active')
ЁЯФ╣ 7. AUTO_INCREMENT (MySQL) / SERIAL (PostgreSQL)
ржХрж╛ржЬ: ржнрзНржпрж╛рж▓рзБ ржЕржЯрзЛ ржЗржиржХрзНрж░рж┐ржорзЗржирзНржЯ рж╣ржмрзЗред

SQL

sql
Copy
Edit
CREATE TABLE users (
    id INT PRIMARY KEY AUTO_INCREMENT
);
Django

python
Copy
Edit
class User(models.Model):
    id = models.AutoField(primary_key=True)
ЁЯФ╣ 8. Composite Key (Multiple Columns Primary Key/Unique)
SQL

sql
Copy
Edit
CREATE TABLE enrollments (
    student_id INT,
    course_id INT,
    PRIMARY KEY (student_id, course_id)
);
Django

python
Copy
Edit
class Enrollment(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    course = models.ForeignKey(Course, on_delete=models.CASCADE)

    class Meta:
        unique_together = ('student', 'course')
ЁЯФ╣ 9. INDEX
ржХрж╛ржЬ: рж╕рж╛рж░рзНржЪ ржкрж╛рж░ржлрж░ржорзНржпрж╛ржирзНрж╕ ржмрж╛рзЬрж╛рзЯред

SQL

sql
Copy
Edit
CREATE INDEX idx_email ON users(email);
Django

python
Copy
Edit
class User(models.Model):
    email = models.EmailField(unique=True)

    class Meta:
        indexes = [
            models.Index(fields=['email'])
        ]
ЁЯФ╣ 10. ENUM (MySQL Specific)
ржХрж╛ржЬ: ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржХрж┐ржЫрзБ ржнрзНржпрж╛рж▓рзБрж░ ржмрж╛ржЗрж░рзЗ ржХрж┐ржЫрзБ ржврзБржХрждрзЗ ржкрж╛рж░ржмрзЗ ржирж╛ред

SQL

sql
Copy
Edit
CREATE TABLE users (
    role ENUM('admin', 'editor', 'viewer') DEFAULT 'viewer'
);
Django

python
Copy
Edit
class User(models.Model):
    ROLE_CHOICES = [
        ('admin', 'Admin'),
        ('editor', 'Editor'),
        ('viewer', 'Viewer'),
    ]
    role = models.CharField(max_length=10, choices=ROLE_CHOICES, default='viewer')
# 1. First-class function
In Python, functions are first-class citizens, meaning:

You can store a function in a variable

You can pass a function as an argument

You can return a function from another function

You can keep functions inside data structures

def square(x):
    return x * x

f = square   # storing function in a variable
print(f(5))  # output: 25

# 2. Pure function
A pure function is one that:

Always gives the same output for the same input

Does not cause side effects (doesn’t modify global state or external variables)

# 2. Pure function
def add(a, b):
    return a + b

print(add(2, 3))  # 5
print(add(2, 3))  # 5 again (same input → same output)


# 3. Impure function (because it changes a global variable)
total = 0
def add_to_total(x):
    global total
    total += x
    return total

# 4. Higher-order function
A higher-order function is a function that:

Takes another function as an argument, OR

Returns a function as a result

# 5. Function as argument
def apply(func, value):
    return func(value)

print(apply(lambda x: x * 2, 5))  # output: 10


# 6. Function as return value
def make_multiplier(n):
    def multiplier(x):
        return x * n
    return multiplier

times3 = make_multiplier(3)
print(times3(10))  # output: 30


# 7. First-class function → Functions can be treated like data
# 8. Pure function → Same input → Same output, no side effects
# 9. Higher-order function → Accepts functions or returns functions